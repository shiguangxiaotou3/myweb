<?php

namespace common\components\imap;


use Yii;
use Exception;
use yii\base\Component;
use Ddeboer\Imap\Server;
use Ddeboer\Imap\Mailbox;
use Ddeboer\Imap\Message;
use yii\helpers\ArrayHelper;
use Ddeboer\Imap\Connection;
use common\components\file\File;
use Ddeboer\Imap\MessageIterator;
use Ddeboer\Imap\MessageIteratorInterface;

/**
 * Class Imap
 * @property-read  string $serverName               服务器名称
 * @property-read  Connection $connection       imap链接对象
 * @property-read string $mailboxName           当前邮箱名称
 * @property Mailbox $mailbox                   邮箱对象
 * @property-read array $mailboxList            邮箱列表及邮件数量
 * @property-read  MessageIterator $messages    邮件集合对象
 * @property  Message $message                  邮件实例
 * @property-read array $messageInfo            邮件的详细信息
 * @property-read string $messageId              邮件id
 * @property-read integer $messageNumber        邮件uid
 * @property-read string $messageSubject        邮件标题
 * @property-read string $messageFrom           发件人
 * @property-read array $messageTo              收件人
 * @property-read integer $messageDate          时间
 * @property-read bool $messageisAnswered       是不是回信
 * @property-read bool $messageisDeleted        是否删除
 * @property-read string  $messageType             是否删除
 * text multipart message application audio image video model other unknown 7bit 8bit binary
 * base64 quoted-printable unknown PLAIN HTML RFC822
 * @property-read bool $messageisDraft          是不是草稿
 * @property-read bool $messageisSeen           是否已发送
 * @property-read string $messageBody           正文
 * @property-read string $messageHeaders        标题
 * @property-read bool $messagehasAttachments   是否存在附件
 * @property-read  Message\Attachment[]|Message\AttachmentInterface[]  $messageAttachments          附加对象
 * @property-read bool $cache
 * @package common\modules\email\components\Imap
 */
class Imap extends Component{
    public  $servers = [
        'qqMailer' => [
            'host' => 'imap.qq.com',
            'port' => 993,
            'flags' => '/imap/ssl',
            'username' => '757402123@qq.com',
            'password' => 'bjhxxjyxnrgibbeg',
            //默认邮箱
            'defaultMailbox'=>'INBOX',
            //时差
            "timeDifference"=>-16*60*60,
            //是否下载文件
            'downloadFile'=>false,
            'mailboxs' => ['INBOX', 'Sent Messages', 'Drafts', 'Deleted Messages', 'Junk'],
        ],
        'outlook' => [
            'host' => 'outlook.office365.com',
            'port' => 993,
            'flags' => '/imap/ssl/validate-cert',
            'username' => 'wanlong757402@outlook.com',
            'password' => 'TIMETHIEF.',
            //默认邮箱
            'defaultMailbox'=>'Inbox',
            //时差
            "timeDifference"=>0,
            //是否下载文件
            'downloadFile'=>false,
            'mailboxs' => ['Inbox', 'Sent', 'Drafts', 'Deleted', 'Junk'],
        ],
    ];
    public $cache = true;  //是否开启文件缓存
    public $path = "@app/runtime/mail";
    public $filename = 'data.php';
    public $defaultViewMailbox = ['Inbox'];
    public $class ='common\modules\email\models\Mailbox';
    private $_server;               //服务器名称
    private $_connection;           //链接对象实例
    private $_mailbox;              //邮箱对象
    private $_message;              //邮件对象

    private $_timeDifference;      //服务器与客户端时间差
    private $_downloadFile;        //是否下载文件
    private $_viewMailbox;

    /**
     * 打开连接
     * @param string $serverName
     * @throws Exception
     */
    public function open($serverName)
    {
        parent::init(); // TODO: Change the autogenerated stub
        $servers = $this->servers;
        $host = ArrayHelper::getValue($servers, $serverName . '.host');
        $port = ArrayHelper::getValue($servers, $serverName . '.port');
        $flags = ArrayHelper::getValue($servers, $serverName . '.flags');
        $username = ArrayHelper::getValue($servers, $serverName . '.username');
        $password = ArrayHelper::getValue($servers, $serverName . '.password');
        //设置时差修正
        if (ArrayHelper::getValue($servers,$serverName."timeDifference")){
            $this->_timeDifference =ArrayHelper::getValue($servers,$serverName."timeDifference");
        }else{$this->_timeDifference =0;}
        //设置是否下载文件
        if (ArrayHelper::getValue($servers,$serverName."downloadFile")){
            $this->_downloadFile = true;
        }else{$this->_downloadFile = false;}
        //设置服务器名称
        $this->_server = $serverName;
        //设置要缓存的邮箱列表
        if (ArrayHelper::getValue($servers,$serverName.".mailboxs")){
            $this->_viewMailbox = ArrayHelper::getValue($servers,$serverName.".mailboxs");
        }
        $imap = new Server($host, $port, $flags);
        $this->_connection = $imap->authenticate($username, $password);
    }
    /**
     * 关闭连接
     * @return bool
     */
    public function close()
    {
        return $this->connection->close();
    }
    /**
     * 获取服务名称
     * @return string
     */
    public function getServerName()
    {
        return $this->_server;
    }
    /**
     * 返回链接对象
     * @return Connection
     */
    public function getConnection()
    {
        return $this->_connection;
    }
    /**
     * 获取当前服务器的所有邮箱列表
     * @return array
     * @throws Exception
     */
    public function getMailboxList(){
        if(isset($this->_viewMailbox) && !empty($this->_viewMailbox)){
            return $this->_viewMailbox;
        }else{
            $mailboxes = $this->connection->getMailboxes();
            $res = [];
            foreach ($mailboxes as $mailbox) {
                /** @var Mailbox $mailbox */
                if ($mailbox->getAttributes() & 2) {
                    continue;
                }
                $res[$mailbox->getName()] = $mailbox->count();
            }
            return $res;
        }

    }
    /**
     * 获取当前服务器的邮箱的名称
     * @return string
     */
    public function getMailboxName()
    {
        return $this->mailbox->getName();
    }
    /**
     * 返回当前邮箱对象
     * @return Mailbox
     */
    public function getMailbox()
    {
        return $this->_mailbox;
    }
    /**
     * 设置当前服务器的 邮箱
     * @param  $mailboxName
     */
    public function setMailbox($mailboxName ){
        $this->_mailbox = $this->connection->getMailbox($mailboxName);
    }
    /**
     * 删除邮箱
     * @param $mailboxName
     */
    public function delMailbox($mailboxName){
        return $this->connection->deleteMailbox($mailboxName);
    }
    /**
     * 获取当前服务器的 当前邮箱的所有邮件信息
     * @return MessageIteratorInterface
     */
    public function getMessages()
    {
        return $this->mailbox->getMessages();

    }
    public function getMessageInfo(){
        try {
            $date =$this->messageDate;
        }catch (Exception $exception){
            $date =0;
        }
        return [
            'id' => $this->messageId,
            "number" => $this->messageNumber,
            'subject' => $this->messageSubject,
            'from' => $this->messageFrom,
            'to' => $this->messageTo,
            'date'=> $date,
            //回答
            'isAnswered' => $this->messageisAnswered,
            //删除
            'isDeleted' => $this->messageisDeleted,
            //草稿
            'isDraft' => $this->messageisDraft,
            'isSeen' => $this->messageisSeen,
            'isAttachment' => $this->messagehasAttachments,
            'type' => $this->messageType,
        ];
    }
    /**
     * 获取邮件单例
     * @return  Message
     */
    public function getMessage()
    {
        return $this->_message;
    }
    /**
     * 设置邮件单例
     * @param Message $message
     */
    public function setMessage($message)
    {
        $this->_message = $message;
    }
    public function getMessageId(){ return $this->message->getId();}
    public function getMessageNumber(){return $this->message->getNumber();}
    public function getMessageSubject(){return $this->message->getSubject();}
    public function getMessageFrom(){return $this->message->getFrom()->getAddress();}
    public function getMessageTo(){
        $to =$this->message->getTo();
        if(is_array($to)){
            $res =[];
            foreach ($to as $value){
                $res[]= $value->getAddress();
            }
            return  implode(',',$res);
        }

        return $this->message->getTo();
    }
    public function getMessageDate(){
        return $this->message->getDate()->getTimestamp()+$this->_timeDifference;
    }
    public function getMessageType(){
        return $this->message->getType();
    }
    public function getMessageisAnswered(){return $this->message->isAnswered();}
    public function getMessageisDeleted(){return $this->message->isDeleted();}
    public function getMessageisDraft(){return $this->message->isDraft();}
    public function getMessageisSeen(){return $this->message->isSeen();}
    public function getMessageBody(){return $this->message->getId();}
    public function getMessageHeaders(){return $this->message->getHeaders();}
    public function getMessagehasAttachments(){return $this->message->hasAttachments(); }
    public function getMessageAttachments (){return $this->message->getAttachments();}

    /*------------------------------------------*\
    / 邮件操作
    /-------------------------------------------*/
    /**
     * 移动邮件到另一个邮箱
     * @param $mailboxName
     * @return bool
     */
    public function messageMove($mailboxName){
        $mailbox=$this->connection->getMailbox($mailboxName);
        if($mailbox){
            return $this->message->move($mailbox) ? true : false;
        }else{
            return false;
        }
    }
    /**
     * 将邮件标记已读
     * @return bool
     */
    public function messageMarkAsSeen (){
        return $this->message->markAsSeen();
    }
    /**
     * 设置邮件标记
     * @param $tag
     * @return bool
     */
    public function messageSetFlag($tag){ return $this->message->setFlag($tag);}
    /**
     * 取消邮件标记
     * @param $tag
     * @return bool
     */
    public function messageClearFlag($tag){return $this->message->ClearFlag($tag);}
    /**
     * 删除当前服务器的 邮件
     * @return mixed
     */
    public function delMessage(){
        $this->message->delete();
        return $this->connection->expunge();
    }

    /*------------------------------------------*\
    / 缓存操作
    /-------------------------------------------*/
    /**
     * 保存当前邮件的正文,需要确保目录存在并可写
     * @param $path
     * @return false|int
     */
    public function saveBody($path){
        try {
            $message = $this->message;
            $type =$message->getType();
            if($type =="multipart"){
                $html = $message->getBodyHtml();
                if (!file_exists($path."/body.html") and $html) {
                    return file_put_contents($path."/body.html", $html, FILE_APPEND);
                }else{
                    return false;
                }
            }elseif ($type =="text"){
                $text = $message->getBodyText();
                if (!file_exists($path."/body.txt") and $text) {
                    return file_put_contents($path."/body.txt", $text, FILE_APPEND);
                }else{
                    return false;
                }
            }
        }catch (Exception $exception){
            logObject($exception->getMessage());
            return  false;
        }
    }
    /**
     * 下载当前邮件的附件,需要确保目录存在并可写
     * @param string $path
     * @return Message\Attachment[]|Message\AttachmentInterface[]
     */
    public function saveMessageAttachments($path){
        if($this->_downloadFile){
            $Attachments =  $this->message->getAttachments();
            if(isset($Attachments)){
                foreach ($Attachments as $attachment){
                    $getFilename = $attachment->getFilename ();
                    $content =$attachment ->getDecodedContent();
                    if( !file_exists($path ."/".$getFilename)){
                        try{
                            file_put_contents ($path ."/".$getFilename, $content);
                        }catch (Exception $exception){
                            continue;
                        }
                    }else{
                        continue;
                    }
                }
            }
        }

    }
    /**
     * 保存当前邮件正文和附件,并写入数据
     * 自动创建目录,需确保有创建目录权限
     * @param bool $save
     * @return array
     */
    public function saveMessage($save =true){
        try {
            $serverName =$this->serverName;
            $mailboxName = $this->mailboxName;
            $number = $this->message->getNumber();
            $path = Yii::getAlias( $this->path).'/'.$serverName.
                "/".$mailboxName."/".$number;
            //创建目录
            if(!is_dir($path )){
                mkdir($path ,0775,true);
            }
            //下载附件
            if($this->_downloadFile){
                $this->saveMessageAttachments($path);
            }
            //写入正文
            $this->saveBody($path);
            //写入数据
            $data[$serverName][$mailboxName]['_'.$number]= $this->messageInfo;
            if($save){
                File::addI18n($data,$this->path,'data');
            }else{
                return $data;
            }
        }catch (Exception $exception){
            logObject($exception->getMessage());
            return false;
        }


    }
    /**
     * 保存当前邮箱的所有邮件
     * @param bool $save
     * @return array
     */
    public function saveMailbox($save =true){
        $messages = $this->messages;
        $data =[];
        foreach ($messages as $message){
            $this->message =$message;
            $arr = $this->saveMessage(false);
            $data = ArrayHelper::merge($data,$arr);
        }
        if ($save){
            File::addI18n($data,$this->path,'data');
        }else{
            return  $data;
        }
    }
    /**
     * 保存当前服务器中的所有邮件
     * @param bool $save
     * @return array
     */
    public function saveServer($save =true){
        $path = $this->path;
        if(isset($this->_viewMailbox) && !empty($this->_viewMailbox)){
            $data = [];
            $mailboxs = $this->_viewMailbox;
            foreach ($mailboxs as $mailbox){
                $this->mailbox =$mailbox;
                $arr = $this->saveMailbox(false);
                $data= ArrayHelper::merge($data,$arr);
            }
            if ($save){
                File::addI18n($data,$path,'data');
            }else{
                return  $data;
            }
        }
    }
    /**
     * 删除本地全部缓存文件
     */
    public function clearFileCache(){
        File::clearDir(Yii::getAlias($this->path));
    }
    /**
     * 显示视图的邮箱列表
     * @param $serverName
     * @return array|bool
     * @throws Exception
     */
    public function getViewMailboxList($serverName)
    {
        if ($this->cache) {
            //如果开启文件开启文件缓存，则从文件中获取数据
            $path = Yii::getAlias($this->path) . '/' . $this->filename;
            if(file_exists($path)){
                $data = require($path);
                $mailboxes = ArrayHelper::getValue($this->servers, $serverName . '.mailboxs');
                $res = [];
                foreach ($mailboxes as $mailbox) {
                    if (isset($data[$serverName][$mailbox])) {
                        $res[$mailbox] = count($data[$serverName][$mailbox]);
                    } else {
                        $res[$mailbox] = 0;
                    }
                }
                return $res;
            }
        }
        return false;
    }
    /**
     * 获取邮件列表
     * @param $server
     * @param $mailboxName
     * @return false|mixed
     */
    public function mailboxMessagesList($server, $mailboxName){
        $path = Yii::getAlias($this->path) . '/' . $this->filename;
        $data = require($path);
        if (isset($data[$server][$mailboxName])) {
            return $data[$server][$mailboxName];
        } else {
            return false;
        }
    }
    /**
     * 获取邮件数据
     * @param $server
     * @param $mailboxName
     * @param $uid
     * @return array
     */
    public function getMesssgeData($server,$mailboxName,$uid){
        $path = Yii::getAlias($this->path) . '/' . $this->filename;
        $data = require($path);
        if(isset($data[$server][$mailboxName]['_'.$uid])){
            $info =$data[$server][$mailboxName]['_'.$uid];
            $info['server']=$server;
            $info['mailbox']=$mailboxName;
            $info['uid']=$uid;
            unset($data);
            if($info['type'] =="text"){
                $info['text']= htmtocode($this->BodyContent($server,$mailboxName,$uid));
            }
            return $info;
        }else{
            return false;
        }

    }
    /**
     * @param $server
     * @param $mailboxName
     * @param $uid
     * @return false|string
     */
    public function BodyContent($server,$mailboxName,$uid){
        $text = Yii::getAlias($this->path)."/".$server."/".$mailboxName."/".$uid."/body.txt";
        $html = Yii::getAlias($this->path)."/".$server."/".$mailboxName."/".$uid."/body.html";
        if(file_exists($text)){
            return file_get_contents($text);
        }elseif(file_exists($html)){
            return file_get_contents($html);
        }else{
            return false;
        }
    }
    public function clearCache($server ='',$mailboxName='',$uid=''){
        $path = Yii::getAlias($this->path);
        $data = require($path . '/' . $this->filename);
        if(empty($server)){//清空全部
            File::clearDir($path);
        }elseif( !empty($server) and empty($mailboxName)){     //清空服务器
            File::clearDir($path.'/'.$server);
            rmdir($path.'/'.$server);
            unset($data[$server]);
            File::writeConfig($path . '/' . $this->filename,$data);
        }elseif (!empty($server) and !empty($mailboxName) and empty($uid)){
            File::clearDir($path.'/'.$server.'/'.$mailboxName);
            rmdir($path.'/'.$server.'/'.$mailboxName);
            unset($data[$server][$mailboxName]);
            File::writeConfig($path . '/' . $this->filename,$data);
        }elseif (!empty($server) and !empty($mailboxName) and !empty($uid)){
            File::clearDir($path.'/'.$server.'/'.$mailboxName.'/'.$uid);
            rmdir($path.'/'.$server.'/'.$mailboxName.'/'.$uid);
            unset($data[$server][$mailboxName]['_'.$uid]);
            File::writeConfig($path . '/' . $this->filename,$data);
        }
    }
}
