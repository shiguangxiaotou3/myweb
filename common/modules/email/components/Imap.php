<?php
namespace common\modules\email\components;


use Ddeboer\Imap\MessageInterface;
use Yii;
use Exception;
use yii\base\Component;
use \DateTimeImmutable;
use Ddeboer\Imap\Server;
use Ddeboer\Imap\Mailbox;
use Ddeboer\Imap\Message;
use yii\helpers\ArrayHelper;
use Ddeboer\Imap\Connection;
use Ddeboer\Imap\MessageIterator;
use Ddeboer\Imap\Message\AbstractMessage;

/**
 * Class Imap
 *
 * @property-read  Connection $connection imap链接对象
 * @property-read  string $server 服务器名称
 * @property-read  bool $Cache 是否启用文件缓存
 * @property-read  array $viewMailbox 要显示的邮箱集合
 * @property-read string $name 当前邮箱名称
 * @property Mailbox $mailbox      邮箱对象
 * @property array $messages    邮件集合
 * @property  Message|AbstractMessage $message    邮件实例
 * @property-read array $mailboxList 可用的操作
 * @property-read array $numbers
 * @property-read mixed $headers
 * @property-read bool $cache
 * @property-read Connection $_connection 链接对象
 * @package common\modules\email\components\Imap
 */
class Imap extends Component{

    public $servers =[
        'qqMailer'=>[
            'host'=>'imap.qq.com',
            'port'=>993,
            'flags'=>'/imap/ssl',
            'username'=>'757402123@qq.com',
            'password'=>'bjhxxjyxnrgibbeg',
            'viewMailbox'=>['INBOX','Sent Messages','Drafts','Deleted Messages','Junk'],
        ],
        'outlook'=>[
            'host'=>'outlook.office365.com',
            'port'=>993,
            'flags'=>'/imap/ssl/validate-cert',
            'username'=>'wanlong757402@outlook.com',
            'password'=>'TIMETHIEF.',
            'viewMailbox'=> ['Inbox','Sent','Drafts','Deleted','Junk'],
        ],
    ];
    /** @var bool $cache 是否启用文件缓存 */
    public $cache= true;
    /** @var string $path 缓存存文件保存目录 */
    public $path = "@app/runtime/mail";
    /** @var string $filename 缓存文件名称 */
    public $filename ='data.php';
    public  $defaultViewMailbox =['Inbox'];

    private $_connection ;
    private $_mailbox;
    private $_message;
    private $_server;
    private $_viewMailbox;

    /**
     * 打开连接
     * @param string $serverName
     * @throws Exception
     */
    public function open($serverName){
        parent::init(); // TODO: Change the autogenerated stub
        $servers =$this->servers;
        $host = ArrayHelper::getValue($servers,$serverName.'.host');
        $port = ArrayHelper::getValue($servers,$serverName.'.port');
        $flags = ArrayHelper::getValue($servers,$serverName.'.flags');
        $username = ArrayHelper::getValue($servers,$serverName.'.username');
        $password = ArrayHelper::getValue($servers,$serverName.'.password');
        $this->_server =  $serverName;
        if(isset($servers[$serverName]['viewMailbox'])){
            $this->_viewMailbox = ArrayHelper::getValue($servers,$serverName.'.viewMailbox');
        }else{
            $this->_viewMailbox =$this->defaultViewMailbox;
        }
        $imap = new Server($host, $port, $flags);
        $this->_connection = $imap->authenticate( $username, $password);
    }
    /**
     * 关闭连接
     * @return bool
     */
   public function close(){
       return $this->connection->close();
   }
    /**
     * @return string
     */
   public function getServer(){
       return $this->_server;
   }
    /**
     * 返回链接对象
     * @return Connection
     */
    public function getConnection(){
        return $this->_connection;
    }
    /**
     * 获取服务器的所有邮箱列表
     * @param $name
     * @return array
     * @throws Exception
     */
    public function getMailboxList($name){
       $this->open($name);
        $mailboxes = $this->connection ->getMailboxes();
        $res =[];
        foreach ($mailboxes as $mailbox) {
            /** @var Mailbox $mailbox */
            if ($mailbox->getAttributes()  & 2) {
                continue;
            }
            $res[$mailbox->getName()] =$mailbox->count();
        }
        $this->close();
        return $res;
    }
    public function getViewMailboxList($serverName){
        if ($this->cache){
            $path = Yii::getAlias($this->path).'/'.$this->filename;
            $data =require($path);
            $mailboxes = ArrayHelper::getValue($this->servers,$serverName.'.viewMailbox');
            $res =[];
            foreach ($mailboxes as $mailbox){
                if(isset($data[$serverName][$mailbox])){
                    $res[$mailbox] = count($data[$serverName][$mailbox]);
                }else{
                    $res[$mailbox] = 0;//count($data[$serverName][$mailbox]);
                }
            }
            return $res;
        }else{
            $this->open($serverName);
            $mailboxes = $this->viewMailbox;
            $res =[];
            foreach ($mailboxes as $mailbox){
                $this->mailbox = $mailbox;
                $res[$mailbox] =$this->mailbox->count();
            }
            $this->close();
            return $res;
        }
    }
    public function mailboxMessagesList($server,$mailboxName){
        if($this->cache){
            $path = Yii::getAlias($this->path).'/'.$this->filename;
            $data =require($path);
            if(isset($data[$server][$mailboxName])){
                return $data[$server][$mailboxName];
            }else{
                return false;
            }

        }
    }

    /**
     * @return array
     */
    public function getViewMailbox(){
        return $this->_viewMailbox;
    }
    /**
     * 获取当前邮箱的名称
     * @return string
     */
    public function getName(){
        return $this->mailbox->getName();
    }
    /**
     * 返回当前邮箱对象
     * @return Mailbox
     */
    public function getMailbox(){
        return $this->_mailbox;
    }
    /**
     * 设置设置邮箱对象
     * @param  $mailboxName
     */
    public function setMailbox($mailboxName = 'INBOX'){
        $this->_mailbox = $this->connection->getMailbox($mailboxName);
    }
    /**
     * 获取邮箱的邮件列表
     * @return array
     */
    public function getMessages(){
        $messages = $this->mailbox->getMessages();
        $res =[];
        foreach ($messages as $message) {
            $res[] =[
                'Id'=> $message->getId(),
                "Number"=> $message->getNumber(),
                'Subject'=>  $message->getSubject(),
                'From'=> $message->getFrom()->getAddress(),
                'To'=>$message->getTo()[0]->getAddress(),
                //'Date'=> $message->getDate()  ,
                //回答
                'Answered'=>$message->isAnswered(),
                //删除
                'Deleted'=>$message->isDeleted(),
                //草稿
                'Draft'=>$message->isDraft(),
                'Seen'=>$message->isSeen(),
                //'html'=>$message->getBodyHtml(),
                //'text'=>$message->getBodyText(),
                //'Headers'=>$message->getHeaders(),
            ];
        }
        return $res;
    }
    /**
     * 获取邮件单例
     * @return  Message
     */
    public function getMessage(){
        return $this->_message;
    }
    /**
     * 设置邮件单例
     * @param integer $number
     */
    public function setMessage($number){
        $messages = $this->mailbox->getMessages();
        $this->_message = $messages[$number];
    }
    /**
     * 删除邮件
     * @return mixed
     */
    public function delMessage(){
        $this->message->delete();
        return $this->connection->expunge();

    }
    /**
     * @param DateTimeImmutable $data
     * @return false|string
     */
    public static function  Unix($data){
        $int = strtotime($data->format("Y-m-d H:m:s")) +8*60*60;
        if($int){
            return $int;
        }else{
            return  false;
        }
    }
    /**
     * 更新本地缓存
     * @param string $boxName
     */
    public function update($boxName = 'INBOX'){

//        $path = Yii::getAlias($this->path.'/'.$this->username."/".$boxName);
//        //创建目录
//        if(!is_dir($path)){
//            mkdir($path,0775,true);
//        }
//        $this->mailbox = $boxName;
//        $messages= $this->mailbox->getMessages();
//        $data =[];
//        /** @var Message|AbstractMessage $message */
//        foreach ($messages as $message){
//            $tmp = $message->getTo();
//            $to =[];
//            foreach ($tmp as $item){
//                $to[] = $item->getAddress();
//            }
//            $key = $message->getNumber();
//            $data[$key] =[
//                'Id'=> $message->getId(),
//                "Number"=> $key,
//                'Subject'=>  $message->getSubject(),
//                'From'=> $message->getFrom()->getAddress(),
//                'To'=>$to,
//                'Date'=> self::Unix($message->getDate())  ,
//                //回答
//                'Answered'=>$message->isAnswered(),
//                //删除
//                'Deleted'=>$message->isDeleted(),
//                //草稿
//                'Draft'=>$message->isDraft(),
//                'Seen'=>$message->isSeen(),
//                ];
//
//            //保存邮件正文
//           $this->saveBody($message,$path,$key);
//           //保存邮件头部
//           $this->saveHeaders($message,$path,$key);
//        }
//        //将数据写入文件
//        File::writeConfig($path."/data.php", $data);
    }
    /**
     * 缓存服务器中的数据
     * 这个方法允许时间很长
     * @return false|int
     * @throws Exception
     */
    public function saveServerList(){
        $path = Yii::getAlias($this->path);
        $servers = array_keys( $this->servers);
        $arr =[];
        foreach ( $servers as $server){
            //创建目录
            $this->createServerDir($server);
            //打开链接
            $this->open($server);
            //获取邮箱列表
            $ViewMailbox = $this->viewMailbox;
            foreach ($ViewMailbox as $mailbox){
                //设置当前邮箱
                $this->mailbox = $mailbox;
                //读取当前邮箱的邮件列表
                /** @var MessageIterator $messages */
                $messages  =$this->mailbox->getMessages();
                foreach ($messages as $message){
                    $number= $message->getNumber();
                    if(!file_exists( $path.'/'.$server."/".$mailbox.'/'.$number.'.txt')){
                        //下载邮件正文
                        $this->saveBody($message,$path.'/'.$server."/".$mailbox,$number);
                    }
                    //获取数据信箱
                    $arr[$server][$mailbox][$number]=[
                        'Id'=> $message->getId(),
                        "Number"=> $message->getNumber(),
                        'Subject'=>  $message->getSubject(),
                        'From'=> $message->getFrom()->getAddress(),
                        'To'=>$message->getTo()[0]->getAddress(),
                        //'Date'=> $message->getDate()  ,
                    ];
                }
            }
            $this->close();
        }
        $path = Yii::getAlias($this->path).'/'.$this->filename;
        return self::saveConfig($path,$arr);
    }
    /**
     * 创建数据目录
     * @param $server
     */
    private function createServerDir($server){
        $path = Yii::getAlias($this->path);
        if(!is_dir($path."/".$server)){
            mkdir($path."/".$server,0755,true);
        }
        if(!isset($this->servers[$server]['viewMailbox'])){
            $arr = $this->defaultViewMailbox;
        }else{
            $arr = $this->servers[$server]['viewMailbox'];
        }
        //创建邮件列表
        foreach ($arr as $box){
            if(!is_dir($path."/".$server."/".$box)){
                mkdir($path."/".$server."/".$box,0755,true);
            }
        }
    }
    /**
     * 保存正文
     * @param AbstractMessage|MessageInterface $message
     * @param string $path
     * @param integer $number
     */
    private function saveBody($message,$path,$number){
        if($message->getBodyHtml()){
            $txt = $message->getBodyHtml();
        }else{
            $txt = $message->getBodyText();
        }
        if(!file_exists($path."/".$number.'.txt')){

            file_put_contents($path."/".$number.'.txt',$txt,FILE_APPEND);
        }

    }

    /**
     * 构造写入字符串,并写入文件中
     * @param $filePath
     * @param $config
     * @return false|int
     */
    public static function writeConfig($filePath, $config){
        if(file_exists($filePath)){
            unlink($filePath);
        }
        $str = "<?php\r\nreturn [\r\n";  // 拼接数组字符串-开头
        $str .= self::ConfigToStr($str, $config,1);  // 拼接数组字符串-中间
        $str .= "];";  //
        return file_put_contents($filePath, $str);
    }
    /**
     * 构造写入数据
     * @param $str
     * @param $array
     * @param int $space
     */
    public static function ConfigToStr(&$str, $array, $space = 0){
        $s ='';
        for ($i =0 ;$i < $space * 4 ;$i++){
            $s .= " ";
        }
        foreach($array as $k=>$item){
            if(is_array($item)){
                $str .= "$s'$k' => [\r\n";
                $str .= self::ConfigToStr($str, $item, $space+1);
                $str .= "$s],\r\n";
            }else{
                $str .= "$s'$k' => '$item',\r\n";
            }
        }
    }
    /**
     * 合并数据
     * @param $path
     * @param $config
     * @return false|int
     */
    public static function saveConfig($path,$config){
        if(!file_exists($path)){
            file_put_contents($path, "<?php\r\nreturn [\r\n"."];");
        }
        $arr = require($path);
        $tmp = array_merge($arr , $config);
        return self::writeConfig($path,$tmp);
    }
}
